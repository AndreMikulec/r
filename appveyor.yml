# Skipping commits affecting specific files (GitHub and Bitbucket only).
skip_commits:
  files:
    # skipping AppVeyor build if, in the pushâ€™s head commit, all of the files
    # have the extension .md
    - '**/*.md'

image: Visual Studio 2015
clone_depth: 1

environment:
  # Always Try to save
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  #
  # https://cygwin.com/mirrors.html and MobaXterm ~/.aptcyg/setup.ini
  #
  # CYG_MIRROR: http://cygwin.mirror.rafal.ca/
  CYG_MIRROR: https://mirrors.kernel.org/sourceware/cygwin/
  # Here, slashes can also be pointing right.
  CYG_CACHE: C:\cygwin\var\cache\setup

  matrix:

  - r: 4.1.0 # stable from source tarball
    PlatformToolset: v142
    Configuration: Debug
    Platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    compiler: cygwin
    #
    githubcache: true

#   - r: 4.1.0 # stable from source tarball
#     PlatformToolset: v142
#     Configuration: Debug
#     Platform: x86
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
#     compiler: cygwin
#     #
#     githubcache: true

for:
-
  matrix:
    only:
      - compiler: cygwin

  # mileage from cygwin 32bit will vary
  # https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Cygwin

  init:
  - echo compiler cygwin init
  - systeminfo
  # https://stackoverflow.com/questions/5089389/how-can-i-check-what-version-edition-of-visual-studio-is-installed-programmatica
  - if not "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property productId
  - if not "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property catalog_productLineVersion
  # Make %x64% available for caching
  # a variable used in the Appveyor cach area must be defined in the init
  - set gitrevshort=%APPVEYOR_REPO_COMMIT:~0,8%
  - ps: |
      # Set-PSDebug -Trace 2
      if ("${env:compiler}" -eq "cygwin") {
        if ("${env:Platform}" -eq "x64") {
          ${env:CYG_ARCH} = "x86_64"
          ${env:CYG_ROOT} = "C:\cygwin64"
        } else {
          ${env:CYG_ARCH} = "x86"
          ${env:CYG_ROOT} = "C:\cygwin"
        }
      }
      #       # cygwin DOES NOT do R subarchitectures
      #       if ("${env:Platform}" -eq "x64") {
      #         ${env:R_ARCH} = "/x64"
      #       } else {
      #         ${env:R_ARCH} = "/i386"
      #       }
      ${env:rbinurl} = "https://cran.r-project.org/bin/windows/base/old/${env:rversion}/R-${env:rversion}-win.exe"
      # "make installcheck" does not like spaces
      ${env:R_HOME} = "C:\RINSTALL"
      #
      # also see that each *.sh dot sources early ". ./init.sh"
      if ("${env:Platform}" -eq "x64") {
        ${env:bit} = "64"
      } else {
        ${env:bit} = "32"
      }
      # cygwin case (NIX case rbit can be "64" or "")
      if ("${env:Platform}" -eq "x64") {
        ${env:rbit} = ""
      } else {
        ${env:rbit} = ""
      }

  #
  # possible user provided in the matrix
  # (for now, keep this area to be the same as "msys2" and NOT ALL "msys2" FEATURES are implemented)
  #
  - if not defined githubcache     set githubcache=false
  - if not defined r               set r=none

  install:
  - echo compiler cygwin install
  - ps: |
      # Set-PSDebug -Trace 2
      # LATER - REMOVE THIS LINE
      ${env:PATH} = "C:\msys64\${env:MSYSTEM}\bin;C:\msys64\usr\bin;C:\msys64\bin;${env:PATH}"
      ${env:PATH} = "${env:CYG_ROOT}\bin;${env:PATH}"

  # From the version
  - ps: |
      # Set-PSDebug -Trace 2
      if("${env:r}" -ne "none") {
        ${env:rversion} = ${env:r}
      }
      # if r equals none
      # then later in the .sh scripts, rversion will be determined

  #
  # only used about a custom R build (not an CYGWIN already compiled binary)
  #
  # no quotes - IMPORTANT to pass to bash
  - if not "%r%"=="none" set rroot=C:\RINSTALL
  - if     "%r%"=="none" set rroot=%CYG_ROOT%
  - mkdir "%rroot%"

  #
  # if "githubcache: true",
  #   then use the git tag 0.0.0.0.0.GITHUBCACHE in github as a "cache" of
  #   r already-compiled-binaries.
  #
  - set r7z=r-r%rversion%-%Platform%-%Configuration%-%compiler%.7z
  - set rgithubbincacheurl=https://github.com/AndreMikulec/plr/releases/download/0.0.0.0.0.GITHUBCACHE/%r7z%
  #
  # note: using Windows instead of Powershell
  # I could not get the Invoke-??? . . . I would silently run (and die), I would not get error feedback.
  #
  - if "%githubcache%"=="true" if not exist "%r7z%"  (
      bash --login -c "$(cygpath ${APPVEYOR_BUILD_FOLDER})/rgithubbincachefailingfound.sh" &
      for /f "delims=" %%i in (%APPVEYOR_BUILD_FOLDER%\rgithubbincachefailingfound.txt) do (set rgithubbincachefailingfound=%%i)
    )
  - if "%githubcache%"=="true" if "%rgithubbincachefailingfound%"=="false" curl -o "%r7z%" -L "%rgithubbincacheurl%"
  - if "%githubcache%"=="true" if "%rgithubbincachefailingfound%"=="false" if exist "%r7z%" (set rgithubbincachefound=true) else (set rgithubbincachefound=false)
  - if "%githubcache%"=="true" if "%rgithubbincachefailingfound%"=="false" if "%rgithubbincachefound%"=="true" (
        mkdir            "%rroot%" &
        7z x "%r7z%"   "-o%rroot%" &
        dir              "%rroot%" &
        if exist "%rroot%\bin\R.exe" (set rgithubbincacheextracted=true) else (set rgithubbincacheextracted=false)
    )
  #                            cygwin: executable IS STILL R.exe (not R)
  # user provided (if any), in the matrix
  - echo githubcache %githubcache%
  # generated
  # internal - do not reuse
  - echo rgithubbincachefailingfound %rgithubbincachefailingfound%
  # reused below
  - echo rgithubbincachefound %rgithubbincachefound%
  - if not defined rgithubbincachefound set rgithubbincachefound=false
  - echo rgithubbincachefound %rgithubbincachefound%
  # reused below
  - echo rgithubbincacheextracted %rgithubbincacheextracted%
  - if not defined rgithubbincacheextracted set rgithubbincacheextracted=false
  - echo rgithubbincacheextracted %rgithubbincacheextracted%

  #
  # R from source tarball (future: from "svn")
  #
  
  - set rsource=c:\projects\r
  - mkdir "%rsource%"
  - if not %r%=="none" curl -o "R-version.tar.gz" -L "https://cran.r-project.org/src/base/R-4/R-%r%.tar.gz"
  #
  # https://superuser.com/questions/80019/how-can-i-unzip-a-tar-gz-in-one-step-using-7-zip
  #
  - if exist "%rsource%" rmdir "c:\projects\r" /S /Q
  - if not %r%=="none" 7z x "R-version.tar.gz" -so | 7z x -aoa -si -ttar -o"c:\projects"
  - dir   "c:\projects"
  # could have done mklink /J fake real
  - move  "c:\projects\R-%r%" "c:\projects\r"

  # https://cygwin.com/faq/faq.html#faq.setup.cli

  # environment of cygwin
  #
  # EARLY 2021
  # https://github.com/petere/postgresql/blob/c3606de647583d7cbb39aadd2a2a989af28b97ea/.appveyor.yml
  # https://ci.appveyor.com/project/petere/postgresql/builds/37986514

  - 'appveyor DownloadFile http://cygwin.com/setup-%CYG_ARCH%.exe -FileName setup.exe'
  #
  # to archive and un-archive (7z)
  - 'setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P p7zip'

  #
  - bash -login -c "cygserver-config --yes"
  #
  - copy %CYG_ROOT%\etc\defaults\etc\cygserver.conf %CYG_ROOT%\etc\defaults\etc\cygserver.conf.original
  - echo kern.ipc.shmmni 32767 >> %CYG_ROOT%\etc\defaults\etc\cygserver.conf
  - echo kern.ipc.shmseg 32767 >> %CYG_ROOT%\etc\defaults\etc\cygserver.conf
  #
  - bash -login -c "cygrunsrv -S cygserver"

  ### If building myself ###
  # better C development
  # gcc-core gcc-g++ (from gcc-c++) gdb make
  # How to install Cygwin C/C++ compiler and configure code blocks IDE
  # 2017
  # https://youtu.be/24_xtaAePDY?t=48
  - if not "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P gcc-core -P gcc-g++ -P gcc-fortran -P gdb -P make

  # R on cygwin
  # https://cygwin.com/cgi-bin2/package-grep.cgi?grep=R-&arch=x86
  ###
  ### NEED A CYGWIN COMPILED "R", so "rversion" (if any) is effectively ignored
  #
  - if     "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P R 
  # R ( bash cygwin libbz2_1 libcairo2 libcurl4 libgcc1 libglib2.0_0 libgomp1 libiconv2 libicu69 libintl8 libjpeg8 liblapack0 liblzma5 libopenblas libpango1.0_0 libpcre2_8_0 libpng16 libreadline7 libtiff6 libtirpc3 libX11_6 libXmu6 libXt6 pkg-config tcl tcl-tk zlib0 R_autorebase)
  - if     "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P cygwin-devel -P -P libbz2 -P libbz2-devel -P libcairo-devel
  - if     "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P libcurl-devel -P libglib2.0-devel -P libiconv-devel -P libicu-devel 
  - if     "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P libintl-devel -P libjpeg-devel -P liblapack-devel -P liblzma-devel -P libopenblas -P libpango1.0-devel 
  - if     "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P libpcre2-devel -P libpng16-devel -P libreadline-devel -P libtiff-devel -P libtirpc-devel -P libX11-devel
  - if     "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P libXmu-devel -P libXt-devel -P tcl-devel -P tcl-tk-devel -P zlib-devel

  #
  - if     "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P R-debuginfo -P libRMath-devel
  #
  # R-debuginfo (cygwin-debuginfo)
  # libRMath (cygwin)
  # libRMath-devel (libRmath pkg-config)
  #

  # preferred (setup is incomplete)
  - if not "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P libqpdf-devel

  #
  # configure looks for the runtime client command line executable
  #
  - if not "%r%"=="none" setup.exe -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P unzip
  #

  build_script:
  # override
  - set R_HOME=%CYG_ROOT%\lib%rbit%\R
  #
  # see them all
  - set
  - bash --login -c "$(cygpath ${APPVEYOR_BUILD_FOLDER})/build_script.sh"

  after_build:
  - bash --login -c "$(cygpath ${APPVEYOR_BUILD_FOLDER})/after_build.sh"

  test_script:
  - bash --login -c "$(cygpath ${APPVEYOR_BUILD_FOLDER})/test_script.sh"

artifacts:
- path: 'r-*.7z'
  name: r_7z

deploy:

  # note, "deploy - on" "compiler: msys2, cygwin" is mis-interpreted as "msys2, cygwin"
  # therefore, "msys2, cygwin" is not a usable deployment filter option

  #
  # To try to deploy to sourceforge, the following must have happened.
  # Requesting a new shell for "andremikulec" and waiting for it to start.
  # queued... creating... starting...
  #

  - provider: FTP
    host: frs.sourceforge.net
    protocol: sftp
    # https://sourceforge.net/projects/andremikulec/files/
    username: andremikulec,andremikulec.u
    password:
      secure: 4gk4GyW4O5RooiOyGeRdoA==
    artifact: r_7z
    folder: /home/frs/project/andremikulec
    application:
    active_mode: false

  #
  # always try to deploy here
  #
  - provider: GitHub
    release: 0.0.0.0.0.GITHUBCACHE
    draft: false
    prerelease: false
    artifact: r_7z
    auth_token:
      secure: KzS1DumC2yBg2LGN9x3AemHFOjAdp+rD58rW5aGGpwW4Pfdwdm7AmRpYKprPY8Gs
    # non - "branch, tag, or commit" will still be expected "false" ( githubcache != true )
    # and never find a r-*.7z to deploy - and that is OK.

  #
  # second, last of Github deployments, to try to appear as "latest"
  #
  - provider: GitHub
    release: $(APPVEYOR_REPO_TAG_NAME)
    draft: false
    prerelease: false
    artifact: r_7z
    auth_token:
      secure: KzS1DumC2yBg2LGN9x3AemHFOjAdp+rD58rW5aGGpwW4Pfdwdm7AmRpYKprPY8Gs
    on:
      APPVEYOR_REPO_TAG: true

on_failure:
  - appveyor PushArtifact %rsource%\config.status

# includes on_success on_failure
on_finish:
  - appveyor PushArtifact %rsource%\config.status